@prefix bgf: <https://celldl.org/ontologies/bondgraph-framework#> .
@prefix cdt: <https://w3id.org/cdt/> .

@prefix : <#> .

#===============================================================================
#
#      q_1                                    q_2
#       |                                      |
#       |            u_f        u_r            |
#      u_1 ---- v_r ----- Re_r ----- v_r ---- u_2
#
#===============================================================================
#
# FAIRDO BG example 3.4 on PMR
# https://models.physiomeproject.org/e/b53/FAIRDO%20BG%20example%203.4.cellml/view
#
# Simulate for 40 seconds at 0.01 second steps
#
#===============================================================================

:Simple_reaction
    a bgf:BondgraphModel ;
    bgf:hasBondElement :q_1, :q_2, :Re_r ;
    bgf:hasJunctionStructure :u_1, :v_r_1, :v_r_2, :u_2 ;
    bgf:hasPowerBond :u_1.q_1, :u_1.v_r_1, :v_r_1.Re_r, :Re_r.v_r_2, :v_r_2.u_2, :u_2.q_2 .

#===============================================================================


## Can we set u/v symbols by node??
## To compare in tests?

## Or have a new property (not bgf:) to denote equivalence???


:q_1
    a bgf:ChemicalConcentration ;
    bgf:variableValue [
        bgf:varName "K" ;
        bgf:hasValue "1 mol-1"^^cdt:ucum
    ], [
        bgf:varName "q" ;
        bgf:hasSymbol "q_1" ;
        bgf:hasValue "1 mol"^^cdt:ucum
    ] .

:q_2
    a bgf:ChemicalConcentration ;
    bgf:variableValue [
        bgf:varName "K" ;
        bgf:hasValue "1 mol-1"^^cdt:ucum
    ], [
        bgf:varName "q" ;
        bgf:hasSymbol "q_2" ;
        bgf:hasValue "0 mol"^^cdt:ucum
    ] .

:Re_r
    a bgf:ChemicalReaction ;
    bgf:variableValue [
        bgf:varName "kappa_r" ;
        bgf:hasSymbol "kappa_r" ;
        bgf:hasValue "0.1 mol/s"^^cdt:ucum
    ] .

#===============================================================================

:u_1
    a bgf:ZeroNode .

:v_r_1
    a bgf:OneNode .

:v_r_2
    a bgf:OneNode .

:u_2
    a bgf:ZeroNode .

#===============================================================================

:u_1.q_1
    bgf:hasSource :u_1 ;
    bgf:hasTarget :q_1 .

:u_1.v_r_1
    bgf:hasSource :u_1 ;
    bgf:hasTarget :v_r_1 .

:v_r_1.Re_r
    bgf:hasSource :v_r_1 ;
    bgf:hasTarget [
        bgf:element :Re_r ;
        bgf:port "f"
    ] .

:Re_r.v_r_2
    bgf:hasSource [
        bgf:element :Re_r ;
        bgf:port "r"
    ] ;
    bgf:hasTarget :v_r_2 .

:v_r_2.u_2
    bgf:hasSource :v_r_2 ;
    bgf:hasTarget :u_2 .

:u_2.q_2
    bgf:hasSource :u_2 ;
    bgf:hasTarget :q_2 .

#===============================================================================
